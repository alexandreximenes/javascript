{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_ordemAtual","_init","connectionFactory","getConnection","then","NegociacaoDao","connection","dao","listaTodos","negociacoes","forEach","adiciona","negociacao","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","NegociacaoService","cadastrar","texto","mensagem","_limpaFormulario","catch","erro","service","obterNegociacoes","filter","some","JSON","stringify","negociacoesExistentes","apagaTodos","esvazia","Negociacao","DateHelper","textoParaData","value","parseInt","parseFloat","focus","coluna","inverteOrdem","ordena","p","s"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController {\n    \n    constructor() {\n        \n        let $ = document.querySelector.bind(document);\n        \n        this._inputData = $('#data');\n        this._inputQuantidade = $('#quantidade');\n        this._inputValor = $('#valor');\n         \n        this._listaNegociacoes = new Bind(\n            new ListaNegociacoes(), \n            new NegociacoesView($('#negociacoesView')), \n            'adiciona', 'esvazia' , 'ordena', 'inverteOrdem');\n       \n        this._mensagem = new Bind(\n            new Mensagem(), new MensagemView($('#mensagemView')),\n            'texto');    \n            \n        this._ordemAtual = ''         \n        \n        this._init();\n    }\n\n    _init(){\n        connectionFactory\n          .getConnection()\n          .then(connection => new NegociacaoDao(connection))\n          .then(dao => dao.listaTodos())\n          .then(negociacoes => {\n            negociacoes.forEach(negociacao => {\n              this._listaNegociacoes.adiciona(negociacao);\n            });\n          });\n\n          setInterval(() => {\n              this.importaNegociacoes();\n          },3000);\n    }\n    \n    adiciona(event) {\n       \n        event.preventDefault();\n\n        let negociacao = this._criaNegociacao();\n\n        new NegociacaoService()\n            .cadastrar(negociacao)\n            .then(mensagem => {\n                this._listaNegociacoes.adiciona(negociacao);\n                this._mensagem.texto = mensagem;\n                this._limpaFormulario();\n            })\n            .catch(erro => this._mensagem.texto = erro);\n    }\n    \n    importaNegociacoes() {\n        \n\n        let service = new NegociacaoService();\n        service\n            .obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                                        //outra forma de fazer isso\n                    !this._listaNegociacoes.negociacoes.some(negociacoesExistentes => \n                        JSON.stringify(negociacao) == JSON.stringify(negociacoesExistentes)\n                )))\n                    // uma forma de importar negociações que ainda não estão na lista\n                    /*JSON.stringify(this._listaNegociacoes.negociacoes).indexOf(JSON.stringify(negociacao)) == -1)*/\n            .then(negociacoes => negociacoes.forEach(negociacao => {\n                this._listaNegociacoes.adiciona(negociacao);\n                this._mensagem.texto = 'Negociações do período importadas'   \n            }))\n            .catch(erro => this._mensagem.texto = erro);                              \n    }\n    \n    apaga() {\n        \n        connectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(mensagem => {\n                this._listaNegociacoes.esvazia();\n                this._mensagem.texto = mensagem;        \n            });\n        \n    }\n    \n    _criaNegociacao() {\n        \n        return new Negociacao(\n            DateHelper.textoParaData(this._inputData.value),\n            parseInt(this._inputQuantidade.value),\n            parseFloat(this._inputValor.value));    \n    }\n    \n    _limpaFormulario() {\n     \n        this._inputData.value = '';\n        this._inputQuantidade.value = 1;\n        this._inputValor.value = 0.0;\n        this._inputData.focus();   \n    }\n    \n    ordena(coluna) {\n        \n        if(this._ordemAtual == coluna) {\n            this._listaNegociacoes.inverteOrdem(); \n        } else {\n            this._listaNegociacoes.ordena((p, s) => p[coluna] - s[coluna]);    \n        }\n        this._ordemAtual = coluna;    \n    }\n}"]}