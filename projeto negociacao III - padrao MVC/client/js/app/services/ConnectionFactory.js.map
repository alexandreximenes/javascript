{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["connectionFactory","stores","dbName","version","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","ConnectionFactory","_createStores","e","target","result","onsuccess","bind","console","log","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAU;;AAE3B,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,SAAS,eAAf;AACA,QAAMC,UAAU,CAAhB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AACA,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAHD;AAAA;AAAA,4CAIuB;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BC,OAA9B,CAAlB;;AAEAO,gCAAYI,eAAZ,GAA8B,aAAK;AAC/BN,gCAAQO,kBAAkBC,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAR;AACH,qBAFD;AAGAT,gCAAYU,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAAChB,UAAL,EAAiB;AACbA,yCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,oCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDgB,gCAAQC,GAAR,CAAYnB,UAAZ;AACAI,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYc,OAAZ,GAAsB,aAAK;AACvBF,gCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAA3B;AACAjB,+BAAOQ,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIC,iBAtBM,CAAP;AAuBH;AA5BD;AAAA;AAAA,0CA8BqBtB,UA9BrB,EA8BiC;AAC7BH,uBAAO0B,OAAP,CAAe,iBAAS;AACxB,wBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,+BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACC,iBALD;AAMH;AArCD;AAAA;AAAA,8CAuCwB;AACpB,oBAAG7B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AA5CD;;AAAA;AAAA;AA8CP,CAvDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var connectionFactory = (function(){\r\n    \r\n        const stores = [\"negociacoes\"];\r\n        const dbName = \"negociacoesDB\";\r\n        const version = 4;\r\n\r\n        var connection = null;\r\n        var close = null;\r\n\r\n        return class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error(\"Não é possivel criar instancias de ConnectionFactory\");\r\n        }\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                resolve(ConnectionFactory._createStores(e.target.result));\r\n            };\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function (){\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    }\r\n                }\r\n                console.log(connection);\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error.name);\r\n                reject(e.target.error.name);\r\n            };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}